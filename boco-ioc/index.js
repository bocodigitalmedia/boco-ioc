// Generated by CoffeeScript 1.10.0
var configure,
  hasProp = {}.hasOwnProperty,
  slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

configure = function(configuration) {
  var $, ArgumentsStrategy, AutoFactoryStrategy, Component, ComponentCyclic, ComponentDependenciesUndefined, ComponentFactory, ComponentUndefined, Components, Configuration, Container, Dictionary, DictionaryEvent, DictionaryValueRemoved, DictionaryValueSet, Exception, IOC, NotImplemented, Promises, PropertiesStrategy, Strategies, Strategy, StrategyNotFound;
  Configuration = (function() {
    function Configuration(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
    }

    Configuration.prototype.require = function(name) {
      return require(name);
    };

    Configuration.prototype.getFunctionArguments = function(fn) {
      var pattern;
      pattern = /\(([^)]*)\)/;
      return fn.toString().match(pattern)[1].split(/,\s*/);
    };

    Configuration.prototype.isObject = function(value) {
      return (value != null) && typeof value === "object";
    };

    Configuration.prototype.isFunction = function(value) {
      return typeof value === "function";
    };

    Configuration.prototype.isArray = function(value) {
      return Array.isArray(value);
    };

    Configuration.prototype.isEmpty = function(value) {
      return (value != null) && value.length === 0;
    };

    Configuration.prototype.assign = function() {
      var sources, target;
      target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      sources.forEach(function(source) {
        var key, results, value;
        results = [];
        for (key in source) {
          if (!hasProp.call(source, key)) continue;
          value = source[key];
          results.push(target[key] = value);
        }
        return results;
      });
      return target;
    };

    Configuration.prototype.createEventEmitter = function() {
      return new (this.require("events").EventEmitter);
    };

    Configuration.prototype.createObject = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Object.create.apply(Object, args);
    };

    Configuration.prototype.defineProperty = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Object.defineProperty.apply(Object, args);
    };

    Configuration.prototype.defineProperties = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return Object.defineProperties.apply(Object, args);
    };

    Configuration.prototype.createPromise = function(resolver) {
      return this.require("when").promise(resolver);
    };

    Configuration.prototype.asyncMap = function(array, mapFn, done) {
      return this.require("async").map(array, mapFn, done);
    };

    Configuration.prototype.asyncWaterfall = function(series, done) {
      return this.require("async").waterfall(series, done);
    };

    return Configuration;

  })();
  Exception = (function(superClass) {
    extend(Exception, superClass);

    Exception.prototype.name = void 0;

    function Exception(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      this.name = this.constructor.name;
      this.message = this.getMessage();
      Error.captureStackTrace(this, this.constructor);
    }

    Exception.prototype.getMessage = function() {
      return this.constructor.name;
    };

    return Exception;

  })(Error);
  NotImplemented = (function(superClass) {
    extend(NotImplemented, superClass);

    function NotImplemented() {
      return NotImplemented.__super__.constructor.apply(this, arguments);
    }

    NotImplemented.prototype.getMessage = function() {
      return "Abstract method not implemented.";
    };

    return NotImplemented;

  })(Exception);
  StrategyNotFound = (function(superClass) {
    extend(StrategyNotFound, superClass);

    function StrategyNotFound() {
      return StrategyNotFound.__super__.constructor.apply(this, arguments);
    }

    StrategyNotFound.prototype.factory = void 0;

    StrategyNotFound.prototype.args = void 0;

    StrategyNotFound.prototype.getMessage = function() {
      var factory;
      factory = this.factory.constructor.name;
      return "No strategy found for factory '" + factory + "' using arguments: [" + this.args + "]";
    };

    return StrategyNotFound;

  })(Exception);
  ComponentDependenciesUndefined = (function(superClass) {
    extend(ComponentDependenciesUndefined, superClass);

    function ComponentDependenciesUndefined() {
      return ComponentDependenciesUndefined.__super__.constructor.apply(this, arguments);
    }

    ComponentDependenciesUndefined.prototype.componentName = void 0;

    ComponentDependenciesUndefined.prototype.undefinedDependencies = void 0;

    ComponentDependenciesUndefined.prototype.getMessage = function() {
      return ("Component '" + this.componentName + "' ") + ("has undefined dependencies: [" + this.undefinedDependencies + "]");
    };

    return ComponentDependenciesUndefined;

  })(Exception);
  ComponentCyclic = (function(superClass) {
    extend(ComponentCyclic, superClass);

    function ComponentCyclic() {
      return ComponentCyclic.__super__.constructor.apply(this, arguments);
    }

    ComponentCyclic.prototype.componentName = void 0;

    ComponentCyclic.prototype.cycles = void 0;

    ComponentCyclic.prototype.getMessage = function() {
      return ("Component '" + this.componentName + "' has " + this.cycles.length + " cycle(s): ") + this.inspectCycles();
    };

    ComponentCyclic.prototype.inspectCycles = function() {
      var mapFn;
      mapFn = (function(_this) {
        return function(cycle) {
          return "['" + (cycle.join("','")) + "']";
        };
      })(this);
      return this.cycles.map(mapFn).join(", ");
    };

    return ComponentCyclic;

  })(Exception);
  ComponentUndefined = (function(superClass) {
    extend(ComponentUndefined, superClass);

    function ComponentUndefined() {
      return ComponentUndefined.__super__.constructor.apply(this, arguments);
    }

    ComponentUndefined.prototype.componentName = void 0;

    ComponentUndefined.prototype.getMessage = function() {
      return "Component not defined: '" + this.componentName + "'";
    };

    return ComponentUndefined;

  })(Exception);
  DictionaryEvent = (function() {
    function DictionaryEvent(props) {
      if (props == null) {
        props = {};
      }
      this.name = this.constructor.name;
      this.setPayload(props.payload);
    }

    DictionaryEvent.prototype.setPayload = function(payload) {
      if (payload == null) {
        payload = {};
      }
      this.payload = {};
      this.payload.dictionary = payload.dictionary;
      return this.payload.key = payload.key;
    };

    return DictionaryEvent;

  })();
  DictionaryValueSet = (function(superClass) {
    extend(DictionaryValueSet, superClass);

    function DictionaryValueSet() {
      return DictionaryValueSet.__super__.constructor.apply(this, arguments);
    }

    return DictionaryValueSet;

  })(DictionaryEvent);
  DictionaryValueRemoved = (function(superClass) {
    extend(DictionaryValueRemoved, superClass);

    function DictionaryValueRemoved() {
      return DictionaryValueRemoved.__super__.constructor.apply(this, arguments);
    }

    return DictionaryValueRemoved;

  })(DictionaryEvent);
  Dictionary = (function() {
    function Dictionary(props) {
      var _definitions, _emitter, ref;
      if (props == null) {
        props = {};
      }
      _emitter = (ref = props.eventEmitter) != null ? ref : $.createEventEmitter();
      this.emit = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _emitter.emit.apply(_emitter, args);
      };
      this.addListener = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _emitter.addListener.apply(_emitter, args);
      };
      this.removeListener = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _emitter.removeListener.apply(_emitter, args);
      };
      this.removeAllListeners = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return _emitter.removeAllListeners.apply(_emitter, args);
      };
      _definitions = $.assign($.createObject(null), props.definitions);
      $.defineProperty(this, "definitions", {
        enumerable: true,
        get: function() {
          return $.assign({}, _definitions);
        }
      });
      this.get = function(key) {
        return _definitions[key];
      };
      this.set = function(key, value) {
        var result;
        result = _definitions[key] = value;
        this.emit("set", new DictionaryValueSet({
          payload: {
            dictionary: this,
            key: key
          }
        }));
        return result;
      };
      this.remove = function(key) {
        var result, value;
        value = _definitions[key];
        result = delete _definitions[key];
        this.emit("remove", new DictionaryValueRemoved({
          payload: {
            dictionary: this,
            key: key
          }
        }));
        return result;
      };
      this.forEach = (function(_this) {
        return function(callback) {
          var key, results, value;
          results = [];
          for (key in _definitions) {
            if (!hasProp.call(_definitions, key)) continue;
            value = _definitions[key];
            results.push(callback(value, key, _this));
          }
          return results;
        };
      })(this);
    }

    Dictionary.prototype.reduce = function(reduceFn, memo) {
      this.forEach(function(value, key, target) {
        return memo = reduceFn(memo, value, key, target);
      });
      return memo;
    };

    Dictionary.prototype.addListener = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.emitter).addListener.apply(ref, args);
    };

    Dictionary.prototype.removeListener = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.emitter).removeListener.apply(ref, args);
    };

    Dictionary.prototype.removeAllListeners = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref = this.emitter).removeAllListeners.apply(ref, args);
    };

    Dictionary.prototype.isDefined = function(key) {
      return this.get(key) !== void 0;
    };

    Dictionary.prototype.isUndefined = function(key) {
      return this.get(key) === void 0;
    };

    return Dictionary;

  })();
  Components = (function(superClass) {
    extend(Components, superClass);

    function Components() {
      return Components.__super__.constructor.apply(this, arguments);
    }

    Components.prototype.getUndefinedDependencies = function(name) {
      return this.get(name).dependencies.filter(this.isUndefined.bind(this));
    };

    Components.prototype.getCycles = function(name, stack) {
      var dependencies, reduceDependencyCycles;
      if (stack == null) {
        stack = [];
      }
      if (stack.indexOf(name) !== -1) {
        return [stack.concat(name)];
      }
      if (!this.isDefined(name)) {
        return [];
      }
      stack = stack.concat(name);
      reduceDependencyCycles = (function(_this) {
        return function(memo, dependency) {
          return memo.concat(_this.getCycles(dependency, stack));
        };
      })(this);
      dependencies = this.get(name).dependencies;
      return dependencies.reduce(reduceDependencyCycles, []);
    };

    Components.prototype.getParentsOf = function(dependee, parents) {
      var reduceParents;
      if (parents == null) {
        parents = [];
      }
      reduceParents = (function(_this) {
        return function(parents, component, name) {
          if (component.dependencies.indexOf(dependee) === -1) {
            return parents;
          }
          if (parents.indexOf(name) !== -1) {
            return parents;
          }
          return _this.getParentsOf(name, parents.concat(name));
        };
      })(this);
      return this.reduce(reduceParents, parents);
    };

    Components.prototype.assertDefined = function(name) {
      if (this.isDefined(name)) {
        return;
      }
      throw new ComponentUndefined({
        componentName: name
      });
    };

    Components.prototype.assertAcyclic = function(name) {
      var cycles;
      cycles = this.getCycles(name);
      if (cycles.length === 0) {
        return;
      }
      throw new ComponentCyclic({
        componentName: name,
        cycles: cycles
      });
    };

    Components.prototype.assertDependenciesDefined = function(name) {
      var undefinedDependencies;
      undefinedDependencies = this.getUndefinedDependencies(name);
      if (undefinedDependencies.length === 0) {
        return;
      }
      throw new ComponentDependenciesUndefined({
        componentName: name,
        undefinedDependencies: undefinedDependencies
      });
    };

    Components.prototype.validate = function(name) {
      this.assertDefined(name);
      this.assertAcyclic(name);
      return this.assertDependenciesDefined(name);
    };

    return Components;

  })(Dictionary);
  Promises = (function(superClass) {
    extend(Promises, superClass);

    function Promises() {
      return Promises.__super__.constructor.apply(this, arguments);
    }

    return Promises;

  })(Dictionary);
  Container = (function() {
    function Container(props) {
      var _components, _promises, ref;
      if (props == null) {
        props = {};
      }
      this.componentFactory = (ref = props.componentFactory) != null ? ref : new ComponentFactory;
      _components = new Components(props.components);
      _promises = new Promises(props.promises);
      _components.addListener("set", (function(_this) {
        return function(event) {
          return _this.handleComponentChange(event.payload.key);
        };
      })(this));
      _components.addListener("remove", (function(_this) {
        return function(event) {
          return _this.handleComponentChange(event.payload.key);
        };
      })(this));
      $.defineProperty(this, "components", {
        enumerable: true,
        get: function() {
          return _components;
        }
      });
      $.defineProperty(this, "promises", {
        enumerable: true,
        get: function() {
          return _promises;
        }
      });
    }

    Container.prototype.defineComponent = function() {
      var args, component, name, ref;
      name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      component = (ref = this.componentFactory).construct.apply(ref, args);
      return this.components.set(name, component);
    };

    Container.prototype.handleComponentChange = function(key) {
      this.promises.remove(key);
      return this.components.getParentsOf(key).forEach((function(_this) {
        return function(parent) {
          return _this.promises.remove(parent);
        };
      })(this));
    };

    Container.prototype.createComponentPromise = function(name) {
      return $.createPromise((function(_this) {
        return function(resolve, reject) {
          return _this.components.get(name).resolve(_this, function(error, result) {
            if (error != null) {
              return reject(error);
            }
            return resolve(result);
          });
        };
      })(this));
    };

    Container.prototype.ensureComponentPromiseSet = function(name) {
      if (this.promises.isDefined(name)) {
        return;
      }
      return this.promises.set(name, this.createComponentPromise(name));
    };

    Container.prototype.resolveComponent = function(name, done) {
      var error, error1;
      try {
        if (!this.promises.isDefined(name)) {
          this.components.validate(name);
        }
        this.ensureComponentPromiseSet(name);
        return this.promises.get(name).then(done.bind(null, null), done);
      } catch (error1) {
        error = error1;
        return done(error);
      }
    };

    return Container;

  })();
  Component = (function() {
    function Component(props) {
      var _dependencies, _factory;
      if (props == null) {
        props = {};
      }
      if (props.dependencies !== null) {
        _dependencies = props.dependencies.slice();
      }
      if (_dependencies == null) {
        _dependencies = [];
      }
      _factory = props.factory;
      $.defineProperties(this, {
        dependencies: {
          enumerable: true,
          get: function() {
            return _dependencies.slice();
          }
        },
        factory: {
          enumerable: true,
          get: function() {
            return _factory;
          }
        }
      });
    }

    Component.prototype.resolveDependencies = function(container, done) {
      var resolveComponent;
      resolveComponent = container.resolveComponent.bind(container);
      return $.asyncMap(this.dependencies, resolveComponent, done);
    };

    Component.prototype.applyFactory = function(args, done) {
      return this.factory.apply(this, slice.call(args).concat([done]));
    };

    Component.prototype.resolve = function(container, done) {
      var series;
      series = Array(this.resolveDependencies.bind(this, container), this.applyFactory.bind(this));
      return $.asyncWaterfall(series, done);
    };

    return Component;

  })();
  Strategies = (function() {
    function Strategies(props) {
      var ref;
      if (props == null) {
        props = {};
      }
      this.collection = (ref = props.collection) != null ? ref : [];
    }

    Strategies.prototype.unshift = function(strategy) {
      return this.strategies.unshift(strategy);
    };

    Strategies.prototype.push = function(strategy) {
      return this.collection.push(strategy);
    };

    Strategies.prototype.find = function() {
      var args, reduceFn;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      reduceFn = function(memo, strategy) {
        if (memo != null) {
          return memo;
        }
        if (strategy.test.apply(strategy, args)) {
          return strategy;
        }
      };
      return this.collection.reduce(reduceFn, null);
    };

    return Strategies;

  })();
  Strategy = (function() {
    function Strategy() {}

    Strategy.prototype.test = function() {
      throw new NotImplemented;
    };

    Strategy.prototype.use = function() {
      throw new NotImplemented;
    };

    return Strategy;

  })();
  PropertiesStrategy = (function(superClass) {
    extend(PropertiesStrategy, superClass);

    function PropertiesStrategy() {
      return PropertiesStrategy.__super__.constructor.apply(this, arguments);
    }

    PropertiesStrategy.prototype.test = function() {
      var props, rest, use;
      props = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return use = $.isEmpty(rest) && $.isObject(props) && $.isFunction(props.factory);
    };

    PropertiesStrategy.prototype.constructComponent = function(props) {
      return new Component(props);
    };

    PropertiesStrategy.prototype.use = function(props) {
      return this.constructComponent(props);
    };

    return PropertiesStrategy;

  })(Strategy);
  ArgumentsStrategy = (function(superClass) {
    extend(ArgumentsStrategy, superClass);

    function ArgumentsStrategy() {
      return ArgumentsStrategy.__super__.constructor.apply(this, arguments);
    }

    ArgumentsStrategy.prototype.test = function() {
      var dependencies, factory, rest, use;
      dependencies = arguments[0], factory = arguments[1], rest = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      if (dependencies == null) {
        dependencies = [];
      }
      return use = $.isEmpty(rest) && $.isArray(dependencies) && $.isFunction(factory);
    };

    ArgumentsStrategy.prototype.use = function(dependencies, factory) {
      if (dependencies == null) {
        dependencies = [];
      }
      return new Component({
        dependencies: dependencies,
        factory: factory
      });
    };

    return ArgumentsStrategy;

  })(Strategy);
  AutoFactoryStrategy = (function(superClass) {
    extend(AutoFactoryStrategy, superClass);

    function AutoFactoryStrategy() {
      return AutoFactoryStrategy.__super__.constructor.apply(this, arguments);
    }

    AutoFactoryStrategy.prototype.test = function() {
      var factory, rest, use;
      factory = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return use = $.isEmpty(rest) && $.isFunction(factory);
    };

    AutoFactoryStrategy.prototype.use = function(factory) {
      var dependencies;
      dependencies = $.getFunctionArguments(factory).slice(0, -1);
      return new Component({
        dependencies: dependencies,
        factory: factory
      });
    };

    return AutoFactoryStrategy;

  })(Strategy);
  ComponentFactory = (function() {
    function ComponentFactory(props) {
      if (props == null) {
        props = {};
      }
      this.strategies = props.strategies;
      if (this.strategies == null) {
        this.strategies = new Strategies;
        this.strategies.push(new PropertiesStrategy);
        this.strategies.push(new ArgumentsStrategy);
        this.strategies.push(new AutoFactoryStrategy);
      }
    }

    ComponentFactory.prototype.construct = function() {
      var args, ref, strategy;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      strategy = (ref = this.strategies).find.apply(ref, args);
      if (strategy == null) {
        throw new StrategyNotFound({
          factory: this,
          args: args
        });
      }
      return strategy.use.apply(strategy, args);
    };

    return ComponentFactory;

  })();
  $ = new Configuration(configuration);
  return IOC = {
    configuration: $,
    configure: configure,
    Configuration: Configuration,
    Exception: Exception,
    NotImplemented: NotImplemented,
    StrategyNotFound: StrategyNotFound,
    ComponentCyclic: ComponentCyclic,
    ComponentDependenciesUndefined: ComponentDependenciesUndefined,
    ComponentUndefined: ComponentUndefined,
    Component: Component,
    Components: Components,
    Container: Container,
    Dictionary: Dictionary,
    DictionaryEvent: DictionaryEvent,
    DictionaryValueSet: DictionaryValueSet,
    DictionaryValueRemoved: DictionaryValueRemoved,
    Promises: Promises,
    Strategies: Strategies,
    Strategy: Strategy,
    ComponentFactory: ComponentFactory,
    PropertiesStrategy: PropertiesStrategy,
    ArgumentsStrategy: ArgumentsStrategy
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
